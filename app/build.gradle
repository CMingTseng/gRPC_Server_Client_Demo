apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.google.protobuf'
apply plugin: 'idea'

android {
    compileSdkVersion compileVersion
    buildToolsVersion buildVersion
    lintOptions {
        disable 'GoogleAppIndexingWarning', 'HardcodedText', 'InvalidPackage'
        textReport true
        textOutput "stdout"
    }
    defaultConfig {
        applicationId "com.lovoo.ubuntudroid.hellogrpc"
        minSdkVersion minVersion
        targetSdkVersion targetVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            // gRPC endpoint
            buildConfigField('String', 'RPC_SERVER_HOST', RpcServerHost)
            buildConfigField('int', 'RPC_SERVER_PORT', RpcServerPort)
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            // gRPC endpoint
            buildConfigField('String', 'RPC_SERVER_HOST', RpcServerHost)
            buildConfigField('int', 'RPC_SERVER_PORT', RpcServerPort)
        }
    }

    sourceSets {
        main {
            proto {
////           FIXME In addition to the default 'src/main/proto' you can set other  Ref : https://github.com/CMingTseng/protobuf-gradle-plugin#fromHistory
                srcDir '../protosfolder/src/main/proto'
////            srcDir 'src/main/protobuf'
////            srcDir 'src/main/protocolbuffers'
////            // In addition to the default '**/*.proto' (use with caution).
////            // Using an extension other than 'proto' is NOT recommended,
////            // because when proto files are published along with class files, we can
////            // only tell the type of a file from its extension.
////            include '**/*.protodevel'
            }
            manifest.srcFile 'src/main/AndroidManifest.xml'
//            FIXME if not set proto  (include  not apply 'com.google.protobuf' plugin  ) need add protosfolder auto generated java !!
//            FIXME  run  gradle build @ protosfolder can  generated java
//            java {
//                srcDir 'src/main/java'
//                srcDir '../protosfolder/build/generated/source/proto/main/lite'
//                srcDir '../protosfolder/build/generated/source/proto/main/grpc'
//            }
//            java.srcDirs = ['src/main/java','../protosfolder/build/generated/source/proto/main/lite','../protosfolder/build/generated/source/proto/main/grpc']
//            java.srcDirs = ['src/main/java',file("${project(':protosfolder').projectDir}/build/generated/source/proto/main/lite"),file("${project(':protosfolder').projectDir}/build/generated/source/proto/main/grpc")]
            java.srcDirs = ['src/main/java', 'src/main/kotlin/']
            aidl.srcDirs = ['src/main/aidl']
            res.srcDirs = ['src/main/res']
            assets.srcDirs = ['src/main/assets']
        }

        test {
            java {
                srcDir 'src/main/java'
                srcDir 'src/test/kotlin/'
            }
        }
        androidTest {
            java {
                srcDir 'src/androidTest/java'
                srcDir 'src/androidTest/kotlin/'
            }
        }
    }
    compileOptions {
        sourceCompatibility javasource
        targetCompatibility javatarget
    }
    packagingOptions {
        exclude 'META-INF/INDEX.LIST'
        exclude 'META-INF/io.netty.versions.properties'
    }
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protobufVersion}"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"

        }
        //FIXME if APP only support Android (can not use any !! Ref : https://hk.saowen.com/a/9d55edb280c562eff884c815b60b6e70cf60fe0eec96ec8389802cd5d3854baa) open below
        //FIXME if use lite  the proto file need add  { option optimize_for = LITE_RUNTIME; }
//        lite {
//            // The codegen for lite comes as a separate artifact
//            artifact = 'com.google.protobuf:protoc-gen-javalite:3.0.0'
//        }
    }
    generateProtoTasks {
        all().each { task ->
            task.generateDescriptorSet = true
            //FIXME if APP only support Android (can not use any !! Ref : https://hk.saowen.com/a/9d55edb280c562eff884c815b60b6e70cf60fe0eec96ec8389802cd5d3854baa) open below
//            task.builtins {
//                // In most cases you don't need the full Java output
//                // if you use the lite output.
//                remove java
//            }
//            task.plugins {
//                lite {}
//                grpc {
//                    // Options added to --grpc_out
//                    option 'lite'
//                }
//            }

            //FIXME below not use lite for Android
            task.builtins {
                java {}
            }
            task.plugins {
                grpc {
                }
            }
        }
    }
}

idea {
    module {
        // The whole build dir is excluded by default, but we need build/generated-sources,
        // which contains the generated proto classes.
        excludeDirs = [file('.gradle')]
        if (buildDir.exists()) {
            excludeDirs += files(buildDir.listFiles())
            excludeDirs -= file("$buildDir/generated-sources")
        }
    }
}

configurations.all {
    resolutionStrategy.force 'com.google.code.findbugs:jsr305:3.0.2'
    resolutionStrategy {
        force "com.android.support:support-annotations:$supportLibVersion"
        force "com.android.support:support-core-utils:$supportLibVersion"
        force "com.android.support:support-v4:$supportLibVersion"
        force "com.android.support:appcompat-v7:$supportLibVersion"
        force "com.android.support:design:$supportLibVersion"
        force "com.android.support:cardview-v7:$supportLibVersion"
        force "com.android.support:recyclerview-v7:$supportLibVersion"
        force "com.android.support:gridlayout-v7:$supportLibVersion"
        force "com.android.support:support-v13:$supportLibVersion"
        failOnVersionConflict()
        preferProjectModules()
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
    implementation 'com.android.support.constraint:constraint-layout:1.1.2'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
    testImplementation 'junit:junit:4.12'
    implementation 'javax.annotation:javax.annotation-api:1.2'
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    implementation 'com.google.guava:guava:20.0'

//  FIXME if do not apply 'com.google.protobuf' plugin and do not implementation project  can use libs generated by protosfolder  build.gradle
    // For protos
//    protobuf files('../protosfolder/src/main/proto')//FIXME if do not use sourceSets can use protobuf to load local proto files
//    implementation "com.google.api.grpc:proto-google-common-protos:1.0.0" //FIXME use implementation to load proto files

    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    implementation "io.grpc:grpc-okhttp:${grpcVersion}"

    // Used in HelloWorldServerTls
    implementation "io.grpc:grpc-netty:${grpcVersion}"
    implementation "io.netty:netty-tcnative-boringssl-static:${nettyTcNativeVersion}"

//    implementation "io.grpc:grpc-alts:${grpcVersion}"
//    implementation "io.grpc:grpc-netty-shaded:${grpcVersion}"
//    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
//    implementation "io.grpc:grpc-all:${grpcVersion}"
    implementation 'com.google.protobuf:protobuf-java:3.6.1'

//    implementation project(":protosfolder")//FIXME  now can not implementation project !!!!

    implementation 'com.jakewharton:butterknife:7.0.0'
    annotationProcessor 'com.jakewharton:butterknife:7.0.0'
}